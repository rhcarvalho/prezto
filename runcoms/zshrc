#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# DO NOT share history between all sessions
unsetopt SHARE_HISTORY

# Force ls to output color, even when output is a pipe
export CLICOLOR_FORCE=1

tree() {
  command tree -C "$@" | less
}

alias watch='watch -c'

typeset -T -U GOPATH gopath
export GOPATH
gopath=(
  $HOME/.go-vendor        # always part of gopath, even if it doesn't exist
  $HOME/Dropbox/go(N-/)
  $HOME/go(N-/)
)
# Prepend latest Go to PATH
path=($HOME/sdk/go1.18.4/bin $path)
# Append every existing GOPATH/bin directory to PATH
path+=(
  ${^gopath}/bin(N-/)
)
# Make it easier to cd into a Go project, e.g.: cd github.com/rhcarvalho/...
cdpath+=(
  ${^gopath}/src(N-/)
)

# List available module updates for build without special tags
go-mod-updates() {
  # Output without "why?"
  #go list -f $'{{if not (or .Standard .Module.Main)}}{{.Module.Path}}{{end}}' all | sort -u | xargs go list -m -u -e -f '{{if .Update}}{{.}}{{end}}'
  # Output with "why?"
  for module in "${(f)$(go list -f '{{if not (or .Standard .Module.Main)}}{{.Module.Path}}{{end}}' all | sort -u | xargs go list -m -u -e -f '{{if .Update}}{{.}}{{end}}')}"; do
    local m="$(cut -d' ' -f1 <<<$module)"
    local why="$(go mod why -m $m | grep -Ev "^([#(]|$m)" | sed -z 's/\n\b/ > /g')"
    echo "$module (via $why)"
  done
}

# Python virtualenv
if hash virtualenvwrapper_lazy-3.sh 2>/dev/null; then
  . virtualenvwrapper_lazy-3.sh
fi

# Add personal utilities to PATH
if [[ -d "$HOME/Dropbox/dotfiles/bin" ]]; then
  path+=(
    "$HOME/Dropbox/dotfiles/bin"
  )
fi

# Configure etcdctl
export ETCDCTL_API=3

# Yarn
path+=(
  $(yarn global bin)
)

# Rust
[[ -f "$HOME/.cargo/env" ]] && source $HOME/.cargo/env

# zsh parameter completion for the dotnet CLI
_dotnet_zsh_complete()
{
  local completions=("$(dotnet complete "$words")")

  reply=( "${(ps:\n:)completions}" )
}
compctl -K _dotnet_zsh_complete dotnet

alias pm=podman
alias pmc=podman-compose
